set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-snv(dados)
vizplotraw(dados1)
dados1<-der_SG(dados1,2,3,13)
vizplotraw(dados1)
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
#plot(model)
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-scale_center(dados1)
vizplotraw(dados1)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
dados1<-scale_center(dados2)
dados1<-scale_center(dados)
dados1<-der_SG(dados1,2,3,13)
vizplotraw(dados1)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
dados1<-scale_center(dados)
dados1<-der_SG(dados1,2,2,13)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
pca(dados1)
library(pls)
library(specmine)
library(SeedCalc)
update.packages(niradm)
#if(!require(devtools)) install.packages("devtools")
#if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
#.rs.restartR()
library(caret)
library(signal)
library(prospectr)
library(niradm)
dados<-read.table("raw.txt", h=T, check.names = F)
vizplotraw(dados)
vizplotmean(dados)
dados1<-scale_center(dados)
vizplotmean(dados1)
dados1<-der_SG(dados1,2,2,13)
vizplotmean(dados1)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(dados1[,-3100],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
pca(dados1)
dados1<-scale_center(dados)
dados1<-der_SG(dados1,1,2,13)
pca(dados1)
vizplotmean(dados1)
model = train(dados1[,-3100],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
model = train(dados1[,-3100],
dados1$class,
method = "kernelpls",
tuneGrid = ncomp=c(10),
model = train(dados1[,-3100],
dados1$class,
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);model
dados1<-scale_center(dados)
vizplotmean(dados1)
pca(dados1)
dados1<-snv(dados)
dados1<-scale_center(dados1)
vizplotmean(dados1)
dados1<-der_SG(dados1,2,2,13)
pca(dados1)
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(dados1[,-3100],
dados1$class,
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);model
previsoes = predict(model , newdata = dados1[,-3100])
matriz_confusao = table(previsoes, dados1[,3100])
confusionMatrix(matriz_confusao)
pca(dados1,1,3)
model = train(dados1[,-3100],
dados1$class,
method = "lda",
tuneLength = 10,
trControl = fitControl);model
trainIndex <- createDataPartition(dados1$class, p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados1[ trainIndex,]
base_teste<- dados1[-trainIndex,]
dados1<-scale_center(dados)
dados1<-der_SG(dados1,2,2,13)
vizplotmean(dados1)
pca(dados1,1,3)
dados1<-snv(dados)
dados1<-scale_center(dados1)
dados1<-der_SG(dados1,2,2,13)
vizplotmean(dados1)
pca(dados1,1,3)
trainIndex <- createDataPartition(dados1$class, p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados1[ trainIndex,]
base_teste<- dados1[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-3100],
base_treinamento$class,
method = "lda",
tuneLength = 10,
trControl = fitControl);model
previsoes = predict(model , newdata = dados1[,-3100])
matriz_confusao = table(previsoes, dados1[,3100])
confusionMatrix(matriz_confusao)
previsoes = predict(model, newdata = base_teste[-3100])
matriz_confusao = table(previsoes,base_teste[, 3100])
print(matriz_confusao)
confusionMatrix(matriz_confusao)
model = train(base_treinamento[,-3100],
base_treinamento$class,
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);model
previsoes = predict(model , newdata = dados1[,-3100])
matriz_confusao = table(previsoes, dados1[,3100])
confusionMatrix(matriz_confusao)
#Load package
library(niradm)
# raw spectra
a<-plotraw_df(nir_seed)
# mean spectra per class
b<-plotmean_df(nir_seed)
ggarrange(a, b,
labels = c("Raw spectra", "Mean spectra"),
ncol = 2, nrow = 1)
library(ggpubr) #for ggarrange
ggarrange(a, b,
labels = c("Raw spectra", "Mean spectra"),
ncol = 2, nrow = 1)
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
remove.packages("niradm", lib="~/R/win-library/4.0")
#Load package
.rs.restartR()
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
#Load package
.rs.restartR()
library(niradm)
library(ggpubr) #for ggarrange
# raw spectra
a<-plotraw_df(nir_seed)
# mean spectra per class
b<-plotmean_df(nir_seed)
ggarrange(a, b,
labels = c("Raw spectra", "Mean spectra"),
ncol = 2, nrow = 1)
choose.dir()
choose.dir()
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
temp = list.files(pattern="*.csv")
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) lapply(temp[i], read.csv(temp[i]))
for (i in 1:length(temp))
assign(temp[i], read.csv(temp[i]))
a<-assign(temp[i], read.csv(temp[i]))
for (i in 1:length(temp)){
a<-assign(temp[i], read.csv(temp[i]))
}
for (i in 1:length(temp)){
a[i]<-assign(temp[i], read.csv(temp[i]))
}
View(a)
a<-()
a<-0
for (i in 1:length(temp)){
a[i]<-cbind(a[i], read.csv(temp[i]))
}
a<-data.frame()
for (i in 1:length(temp)){
a[i]<-cbind(a[i], read.csv(temp[i]))
}
temp = list.files(pattern="*.csv")
a<-data.frame()
for (i in 1:length(temp)){
a[i]<-cbind(a[i], read.csv(temp[i]))
}
for (i in 1:length(temp)){
a[,i]<-cbind(a[,i], read.csv(temp[i]))
}
data_all <- list.files(pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
library("dplyr")                                                  # Load dplyr package
library("plyr")                                                   # Load plyr package
library("readr")
data_all <- list.files(pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
View(data_all)
data_all <- list.files(pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_cols()
View(b)
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)){
assign(temp[i], read.csv(temp[i]))} %>%
merge()
View(L11.csv)
temp = list.files(pattern="*.csv", h=F)
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)){
assign(temp[i], read.csv(temp[i],h=F))} %>%
merge(, [,1])
assign(temp[i], read.csv(temp[i],h=F))}
for (i in 1:length(temp)){
assign(temp[i], read.csv(temp[i],h=F))}
View(L12.csv)
for (i in 1:length(temp)){
a<- assign(temp[i], read.csv(temp[i],h=F))}
a<-0
for (i in 1:length(temp)){
a<- assign(temp[i], read.csv(temp[i],h=F))}
lista<-list.files(pattern="*.csv",full.names=TRUE)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
dados    <- do.call("cbind", arquivos)
dados
lista<-list.files(pattern="*.csv",full.names=TRUE)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
dados    <- do.call("cbind", arquivos)
View(dados)
length(dados)
elim<-seq(from = 1, to = length(dados), by = 2)
dados<-dados[,-c(elim)]
head(dados)
lista<-list.files(pattern="*.csv",full.names=TRUE)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
dados    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(dados), by = 2)
dados<-dados[,-c(elim)]
head(dados)
lista<-list.files(pattern="*.csv",full.names=TRUE)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
dados    <- do.call("cbind", arquivos)
View(dados)
View(dados)
dados<-t(dados)
lista<-list.files(pattern="*.csv",full.names=TRUE)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
dados    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(dados), by = 2)
dados<-dados[,-c(elim)]
dados<-as.data.frame(t(dados))
View(dados)
lista<-list.files(pattern="*.csv",full.names=TRUE)
arquivos <- lapply(lista, function(x) read.csv(x, header=T))
dados    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(dados), by = 2)
dados<-dados[,-c(elim)]
dados<-as.data.frame(t(dados))
View(dados)
lista<-list.files(pattern="*.csv",full.names=TRUE)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
dados    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(dados), by = 2)
dados<-dados[,-c(elim)]
dados<-as.data.frame(t(dados))
View(dados)
dados<-as.data.frame(t(dados,h=T))
names(dados) <- dados[1,]
dados <- dados[-1,]
View(dados)
rownames(dados)<-lista
View(dados)
lista<-list.files(pattern="*.csv",full.names=F)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
dados    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(dados), by = 2)
dados<-dados[,-c(elim)]
dados<-as.data.frame(t(dados))
names(dados) <- dados[1,]
dados <- dados[-1,]
rownames(dados)<-lista
View(dados)
import<-function(dir=choose.dir()){
lista<-list.files(pattern="*.csv",full.names=F)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
df    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(df), by = 2)
df<-df[,-c(elim)]
df<-as.data.frame(t(df))
names(df) <- df[1,]
df <- df[-1,]
rownames(df)<-lista
}
import()
import<-function(dir=choose.dir()){
choose.dir()
lista<-list.files(pattern="*.csv",full.names=F)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
df    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(df), by = 2)
df<-df[,-c(elim)]
df<-as.data.frame(t(df))
names(df) <- df[1,]
df <- df[-1,]
rownames(df)<-lista
}
import()
import(c:/mede)
import(C:\Users\medei\OneDrive\Área de Trabalho\1.test)
import(C:/Users/medei/OneDrive/Área de Trabalho/1.test)
import("C:/Users/medei/OneDrive/Área de Trabalho/1.test")
choose.dir()
import<-function(dir=choose.dir()){
setwd(dir)
lista<-list.files(pattern="*.csv",full.names=F)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
df    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(df), by = 2)
df<-df[,-c(elim)]
df<-as.data.frame(t(df))
names(df) <- df[1,]
df <- df[-1,]
rownames(df)<-lista
}
import("C:/Users/medei/OneDrive/Área de Trabalho/1.test")
import<-function(dir=choose.dir()){
setwd(dir)
lista<-list.files(pattern="*.csv",full.names=F)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
df    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(df), by = 2)
df<-df[,-c(elim)]
df<-as.data.frame(t(df))
names(df) <- df[1,]
df <- df[-1,]
rownames(df)<-lista
}
import("C:/Users/medei/OneDrive/Área de Trabalho/1.test")
import<-function(dir=choose.dir()){
setwd(dir)
lista<-list.files(pattern="*.csv",full.names=F)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
df    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(df), by = 2)
df<-df[,-c(elim)]
df<-as.data.frame(t(df))
names(df) <- df[1,]
df <- df[-1,]
rownames(df)<-lista
return(df)
}
a<-import("C:/Users/medei/OneDrive/Área de Trabalho/1.test")
View(a)
a<-import()
import<-function(directory=choose.dir()){
setwd(directory)
lista<-list.files(pattern="*.csv",full.names=F)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
df    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(df), by = 2)
df<-df[,-c(elim)]
df<-as.data.frame(t(df))
names(df) <- df[1,]
df <- df[-1,]
rownames(df)<-lista
return(df)
}
import_csv<-function(directory=choose.dir()){
setwd(directory)
lista<-list.files(pattern="*.csv",full.names=F)
arquivos <- lapply(lista, function(x) read.csv(x, header=F))
df    <- do.call("cbind", arquivos)
elim<-seq(from = 3, to = length(df), by = 2)
df<-df[,-c(elim)]
df<-as.data.frame(t(df))
names(df) <- df[1,]
df <- df[-1,]
rownames(df)<-lista
return(df)
}
a<-import()
setwd("~/GitHub/niradm/R")
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
load_all()
document()
check_man()
document()
check()
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
.rs.restartR()
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
.rs.restartR()
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
#Load package
library(niradm)
library(niradm)
import_csv()
a<-import_csv()
View(a)
df<-nir_seed
df$rev(names(dados))[1]
df$rev(names(df))[1]
rev(names(df))[1]
class1<-rev(names(dados))[1]]
class1<-rev(names(df))[1]]
class1<-rev(names(df))[1]
df$class1
df$class1[1]
length(df)
df[,length(df)]
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
library(caret)
Classification<-function(df){
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados[trainIndex,]
base_teste<- dados[-trainIndex,]
Classification<-function(df){
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados[trainIndex,]
base_teste<- dados[-trainIndex,]
}
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
df<-nir_seed
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
.rs.restartR()
.rs.restartR()
.rs.restartR()
df<-nir_seed
library(caret)
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados[trainIndex,]
base_teste<- dados[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
