rownames(df)<-lista
return(df)
}
a<-import()
setwd("~/GitHub/niradm/R")
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
load_all()
document()
check_man()
document()
check()
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
.rs.restartR()
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
.rs.restartR()
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
#Load package
library(niradm)
library(niradm)
import_csv()
a<-import_csv()
View(a)
df<-nir_seed
df$rev(names(dados))[1]
df$rev(names(df))[1]
rev(names(df))[1]
class1<-rev(names(dados))[1]]
class1<-rev(names(df))[1]]
class1<-rev(names(df))[1]
df$class1
df$class1[1]
length(df)
df[,length(df)]
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
library(caret)
Classification<-function(df){
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados[trainIndex,]
base_teste<- dados[-trainIndex,]
Classification<-function(df){
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados[trainIndex,]
base_teste<- dados[-trainIndex,]
}
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
df<-nir_seed
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
.rs.restartR()
.rs.restartR()
.rs.restartR()
df<-nir_seed
library(caret)
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados[trainIndex,]
base_teste<- dados[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
library(niradm)
df<-nir_seed
library(caret)
trainIndex <- createDataPartition(df[,length(df)], p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados[trainIndex,]
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento$class,
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);model
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);model
Classification<-function(df,part){
trainIndex <- createDataPartition(df[,length(df)], p = .part,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
return(model)
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
return(results_training)
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
return(results_test)
}
Classification(df,60)
Classification<-function(df,part=0.6){
trainIndex <- createDataPartition(df[,length(df)], p = part,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
return(model)
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
return(results_training)
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
return(results_test)
}
Classification(df,0.60)
Classification<-function(df,part=0.6){
trainIndex <- createDataPartition(df[,length(df)], p = part,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
a<-model
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
b<-results_training
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
c<-results_test
mylist<-list(a,b,c)
return(mylist)
}
Classification(df,0.60)
Classification<-function(df,part=0.6){
trainIndex <- createDataPartition(df[,length(df)], p = part,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
a<-model
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
b<-results_training
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
c<-results_test
mylist<-list("Cross-validation"=a,b,c)
return(mylist)
}
Classification(df,0.60)
Classification_df<-function(df,part=0.6){
trainIndex <- createDataPartition(df[,length(df)], p = part,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
a<-model
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
b<-results_training
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
c<-results_test
mylist<-list("Cross-validation"=a,"Training results"=b,"Testing results"=c)
return(mylist)
}
Classification(df,0.60)
Classification_df<-function(df,part=0.6){
set.seed(7)
trainIndex <- createDataPartition(df[,length(df)], p = part,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
a<-model
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
b<-results_training
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
c<-results_test
mylist<-list("Cross-validation"=a,"Training results"=b,"Testing results"=c)
return(mylist)
}
Classification(df,0.60)
df<-nir_seed
set.seed(7)
trainIndex <- createDataPartition(df[,length(df)], p = part,
list = FALSE,
times = 1)
part=0.6
trainIndex <- createDataPartition(df[,length(df)], p = part,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
a<-model
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
b<-results_training
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
c<-results_test
mylist<-list("Cross-validation"=a,"Training results"=b,"Testing results"=c)
View(mylist)
Classification_df<-function(df,part=0.6){
set.seed(7)
trainIndex <- createDataPartition(df[,length(df)], p = part,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
a<-model
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
b<-results_training
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
c<-results_test
mylist<-list("Cross-validation"=a,"Training results"=b,"Testing results"=c)
return(mylist)
}
Classification(df,0.60)
View(mylist)
mylist[["Training results"]]
Classification_df<-function(df,part=0.6){
set.seed(7)
trainIndex <- createDataPartition(df[,length(df)], p = part,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
a<-model
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
b<-results_training
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
c<-results_test
mylist<-list("Cross-validation"=a,"Training_results"=b,"Testing_results"=c)
return(mylist)
}
Classification(df,0.60)
mylist$`Training results`
mylist$`Training results`
z<-Classification(df,0.60)
View(z)
View(mylist)
View(z)
View(model)
View(mylist)
Classification_df<-function(df,part=0.6){
set.seed(7)
trainIndex <- createDataPartition(df[,length(df)], p = part,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
a<-model
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
b<-results_training
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
c<-results_test
mylist<-list("Cross-validation"=a,"Training_results"=b,"Testing_results"=c)
return(mylist)
}
library(niradm)
df<-nir_seed
z<-Classification(df,0.60)
z<-Classification_df(df,0.60)
View(z)
Classification_df<-function(df,splitting=0.6,method_cv="repeatedcv",number_cv = 10,repeats_cv=3){
set.seed(7)
trainIndex <- createDataPartition(df[,length(df)], p = splitting,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = method_cv,
number = number_cv,
## repeated ten times
repeats = repeats_cv)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);
a<-model
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
b<-results_training
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
c<-results_test
mylist<-list("Cross-validation"=a,"Training_results"=b,"Testing_results"=c)
return(mylist)
}
Classification_df(df)
Classification_df<-function(df,splitting=0.6,algorithm="kernelpls",method_cv="repeatedcv",number_cv = 10,repeats_cv=3){
set.seed(7)
trainIndex <- createDataPartition(df[,length(df)], p = splitting,
list = FALSE,
times = 1)
base_treinamento <- df[trainIndex,]
base_teste<- df[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = method_cv,
number = number_cv,
## repeated ten times
repeats = repeats_cv)
model = train(base_treinamento[,-length(df)],
base_treinamento[,length(df)],
method = algorithm,
tuneLength = 10,
trControl = fitControl);
a<-model
previsoes = predict(model , newdata = base_treinamento[,-length(df)])
matriz_confusao = table(previsoes, base_treinamento[,length(df)])
results_training<-confusionMatrix(matriz_confusao)
b<-results_training
previsoes = predict(model, newdata = base_teste[,-length(df)])
matriz_confusao = table(previsoes,base_teste[, length(df)])
results_test<-confusionMatrix(matriz_confusao)
c<-results_test
mylist<-list("Cross-validation"=a,"Training_results"=b,"Testing_results"=c)
return(mylist)
}
Classification_df(df)
Classification_df(df,algorithm = "lda")
setwd("~/GitHub/niradm/R")
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
load_all()
document()
check_man()
document()
check()
load_all()
document()
check_man()
document()
check()
