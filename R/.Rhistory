var6 <- All %>%
filter(variable == "M3") %>%
ggplot(aes(x = Lote, y = value, fill=value)) +
geom_bar(stat='identity',  alpha = 0.8) +
scale_x_discrete(labels=c("Lote1" = "1","Lote2" = "2","Lote3" = "3","Lote4" = "4","Lote5" = "5","Lote6" = "6"))+
scale_fill_gradient(low="gray", high="black") +
labs(x = "Lot",
y = "Reflectance",
subtitle = "Band 3")+
geom_text(aes(label=sk), size = 5, vjust = -1.5,position = position_dodge(0.9))+
geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2, position=position_dodge(.9))+
theme_light()+
theme(legend.position = "none") +
scale_y_continuous(expand = c(0,0), limits = c(0,100))#+ coord_polar()
var7 <- All %>%
filter(variable == "M4") %>%
ggplot(aes(x = Lote, y = value, fill=value)) +
geom_bar(stat='identity',  alpha = 0.8) +
scale_x_discrete(labels=c("Lote1" = "1","Lote2" = "2","Lote3" = "3","Lote4" = "4","Lote5" = "5","Lote6" = "6"))+
scale_fill_gradient(low="gray", high="black") +
labs(x = "Lot",
y = "Reflectance",
subtitle = "Band 4")+
geom_text(aes(label=sk), size = 5, vjust = -1.5,position = position_dodge(0.9))+
geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2, position=position_dodge(.9))+
theme_light()+
theme(legend.position = "none") +
scale_y_continuous(expand = c(0,0), limits = c(0,100))#+ coord_polar()
var8 <- All %>%
filter(variable == "M5") %>%
ggplot(aes(x = Lote, y = value, fill=value)) +
geom_bar(stat='identity',  alpha = 0.8) +
scale_x_discrete(labels=c("Lote1" = "1","Lote2" = "2","Lote3" = "3","Lote4" = "4","Lote5" = "5","Lote6" = "6"))+
scale_fill_gradient(low="gray", high="black") +
labs(x = "Lot",
y = "Reflectance",
subtitle = "Band 5")+
geom_text(aes(label=sk), size = 5, vjust = -1.5,position = position_dodge(0.9))+
geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2, position=position_dodge(.9))+
theme_light()+
theme(legend.position = "none") +
scale_y_continuous(expand = c(0,0), limits = c(0,100))#+ coord_polar()
(var1|var2|var3)/
(var31|var32|var33)
(var1|var2|var3)/
(var4|var5|var6)
install.packages(specmine)
install.packages("specmine")
library(specmine)
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
dados<-nir_seed
msc_correction(dados[,-313])
msc_correction(as.matrix(dados[,-313]))
data(cassavaPPD)
data(cassavaPPD)
library(specmine)
data(cassavaPPD)
data(cassavaPPD)
library(cassavaPPD)
library(specmine)
data("propolis")
propolis.msc = msc_correction(propolis)
View(propolis)
propolis[["data"]]
View(propolis.msc)
propolis.msc[["data"]]
library(pls)
msc(dados,reference = NULL)
msc(dados[,-313],reference = NULL)
View(dados)
msc(dados[,-313],reference = NULL)
data(yarn)
dados1<-data(yarn)
dados1<-yarn
View(dados1)
dados<-nir_seed
names(dados)[names(dados) == rev(names(dados))[1]] <- 'class'
dados$class<-as.factor(dados$class)
dados1<-melt(dados,id= "class")
dados1<-  mutate(dados1, ordem = rep(seq(1,nrow(dados),1), nlevels(dados$class)*((ncol(dados)-1)/nlevels(dados$class))))
dados1$variable<-as.numeric(as.character(dados1$variable))
View(dados1)
dados2<-yarn
View(dados2)
msc(dados1,reference = NULL)
msc(dados2,reference = NULL)
Ztrain <- msc(yarn$NIR[yarn$train,])
yarn$NIR
yarn$NIR[yarn$train,]
ztest<-msc(dados1$value)
ztest<-msc(dados1$value[dados1$class,])
newspectra<-msc(as.matrix(mydata$NIR))
View(dados1)
newspectra<-msc(as.matrix(dados1$value))
dados1$value
as.matrix(dados1$value)
newspectra<-msc(as.matrix(dados1$value))
chondro.msc <- chondro
install.packages("hyperSpec")
install.packages("hyperSpec")
library(hyperSpec)
chondro.msc <- chondro
View(chondro.msc)
chondro.msc@data
chondro.msc [[]]
dados3<-chondro [[]]
View(dados3)
chondro.msc [[]] <- msc (dados3)
library(pls)
chondro.msc [[]] <- msc (dados3)
library(niradm)
cc<-msc(nir_seed[,-313])
cc<-msc(as.matrix(nir_seed[,-313]))
View(cc)
load_all()
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
dados<-nir_seed
names(dados)[names(dados) == rev(names(dados))[1]] <- 'class'
dados1<-as.data.frame(dados[,-ncol(dados)])
dados1<- msc(as.matrix(dados1))
View(dados1)
dados1<-as.matrix(dados1)
dados1<- msc(dados1)
dados<-nir_seed
names(dados)[names(dados) == rev(names(dados))[1]] <- 'class'
dados1<-as.data.frame(dados[,-ncol(dados)])
dados1<-as.matrix(dados1)
dados1<- msc(dados1)
View(dados1)
dados2<-as.matrix(dados[,-313])
dados3<-msc(dados2)
cc<-msc(as.matrix(nir_seed[,-313]))
.rs.restartR()
.rs.restartR()
library(pls)
library(niradm)
cc<-msc(as.matrix(nir_seed[,-313]))
dados<-nir_seed
names(dados)[names(dados) == rev(names(dados))[1]] <- 'class'
dados1<-as.data.frame(dados[,-ncol(dados)])
dados1<- msc(as.matrix(dados1))
dados1<-as.data.frame(dados1)
dados1$class<-as.factor(dados$class)
dados<-dados1
return(as.data.frame(dados))
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
library(niradm)
load_all()
document()
check_man()
document()
check()
#' a<-vizplotmean(nir_seed)
#' #Applying Multiplicative Scatter Correction
#' dados<-msc(nir_seed)
#' b<-vizplotmean(dados)
#' library(ggpubr)
#' ggarrange(a, b),
#' labels = c("A", "B"),
#' ncol = 2, nrow = 1)
#' @export
#'
msc<-function(dados){
names(dados)[names(dados) == rev(names(dados))[1]] <- 'class'
dados1<-as.data.frame(dados[,-ncol(dados)])
dados1<- msc(as.matrix(dados1))
dados1<-as.data.frame(dados1)
dados1$class<-as.factor(dados$class)
dados<-dados1
return(as.data.frame(dados))
}
data(nir_seed)
a<-vizplotmean(nir_seed)
#Applying Multiplicative Scatter Correction
dados<-msc(nir_seed)
#Applying Multiplicative Scatter Correction
dados<-msc(nir_seed)
dados<-nir_seed
names(dados)[names(dados) == rev(names(dados))[1]] <- 'class'
dados1<-as.data.frame(dados[,-ncol(dados)])
dados1<- msc(as.matrix(dados1))
dados1<-as.data.frame(dados1)
dados1<-as.matrix(dados1)
dados1<- msc(dados1)
dados<-nir_seed
names(dados)[names(dados) == rev(names(dados))[1]] <- 'class'
dados1<-as.data.frame(dados[,-ncol(dados)])
dados1<- msc(as.vector(dados1))
Cstack_info()
rm(list = ls())
dados<-nir_seed
names(dados)[names(dados) == rev(names(dados))[1]] <- 'class'
dados1<-as.data.frame(dados[,-ncol(dados)])
dados1<- msc(as.vector(dados1))
rm(list = ls())
.rs.restartR()
.rs.restartR()
rm(list = ls())
library(niradm)
library(pls)
dados<-nir_seed
names(dados)[names(dados) == rev(names(dados))[1]] <- 'class'
dados1<-as.data.frame(dados[,-ncol(dados)])
dados1<- msc(as.vector(dados1))
dados1<- msc(as.matrix(dados1))
dados1<-as.data.frame(dados1)
dados1$class<-as.factor(dados$class)
dados<-dados1
rm(list = ls())
.rs.restartR()
rm(list = ls())
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
load_all()
document()
check_man()
document()
check()
load_all()
document()
check_man()
document()
check()
build()
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
.rs.restartR()
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
library(niradm)
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
build()
.rs.restartR()
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
library(niradm)
dados<-nir_seed
dados1<-msc_pt(dados)
vizplotraw(dados1)
dados2<-svn(dados1)
dados2<-snv(dados1)
dados2<-snv(dados)
vizplotraw(dados2)
#if(!require(devtools)) install.packages("devtools")
#if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
#.rs.restartR()
library(caret)
library(signal)
library(prospectr)
library(niradm)
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-scale_center(dados)
dados1<-der_SG(dados1,2,2,13)
vizplotraw(dados1)
dados1<-snv(dados1)
vizplotraw(dados1)
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-snv(dados)
vizplotraw(dados1)
dados1<-der_SG(dados1,2,2,13)
vizplotraw(dados1)
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-snv(dados)
dados1<-scale_center(dados)
vizplotraw(dados1)
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-snv(dados)
dados1<-scale_center(dados1)
vizplotraw(dados1)
dados1<-der_SG(dados1,2,2,13)
vizplotraw(dados1)
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-scale_center(dados1)
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-snv(dados)
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
model = train(dados1[,-3113],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-snv(dados)
dados1<-der_SG(dados1,2,2,13)
model = train(dados1[,-3113],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-scale_center(dados1)
dados1<-snv(dados)
dados1<-der_SG(dados1,1,2,13)
vizplotraw(dados1)
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-snv(dados)
vizplotraw(dados1)
dados1<-der_SG(dados1,2,3,13)
vizplotraw(dados1)
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
#plot(model)
dados<-read.table("dados.txt", h=T, check.names = F)
dados1<-scale_center(dados1)
vizplotraw(dados1)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
dados1<-scale_center(dados2)
dados1<-scale_center(dados)
dados1<-der_SG(dados1,2,3,13)
vizplotraw(dados1)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
dados1<-scale_center(dados)
dados1<-der_SG(dados1,2,2,13)
model = train(dados1[,-3101],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
pca(dados1)
library(pls)
library(specmine)
library(SeedCalc)
update.packages(niradm)
#if(!require(devtools)) install.packages("devtools")
#if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
#.rs.restartR()
library(caret)
library(signal)
library(prospectr)
library(niradm)
dados<-read.table("raw.txt", h=T, check.names = F)
vizplotraw(dados)
vizplotmean(dados)
dados1<-scale_center(dados)
vizplotmean(dados1)
dados1<-der_SG(dados1,2,2,13)
vizplotmean(dados1)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(dados1[,-3100],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
pca(dados1)
dados1<-scale_center(dados)
dados1<-der_SG(dados1,1,2,13)
pca(dados1)
vizplotmean(dados1)
model = train(dados1[,-3100],
dados1$class,
method = "kernelpls",
trControl = fitControl);model
model = train(dados1[,-3100],
dados1$class,
method = "kernelpls",
tuneGrid = ncomp=c(10),
model = train(dados1[,-3100],
dados1$class,
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);model
dados1<-scale_center(dados)
vizplotmean(dados1)
pca(dados1)
dados1<-snv(dados)
dados1<-scale_center(dados1)
vizplotmean(dados1)
dados1<-der_SG(dados1,2,2,13)
pca(dados1)
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(dados1[,-3100],
dados1$class,
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);model
previsoes = predict(model , newdata = dados1[,-3100])
matriz_confusao = table(previsoes, dados1[,3100])
confusionMatrix(matriz_confusao)
pca(dados1,1,3)
model = train(dados1[,-3100],
dados1$class,
method = "lda",
tuneLength = 10,
trControl = fitControl);model
trainIndex <- createDataPartition(dados1$class, p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados1[ trainIndex,]
base_teste<- dados1[-trainIndex,]
dados1<-scale_center(dados)
dados1<-der_SG(dados1,2,2,13)
vizplotmean(dados1)
pca(dados1,1,3)
dados1<-snv(dados)
dados1<-scale_center(dados1)
dados1<-der_SG(dados1,2,2,13)
vizplotmean(dados1)
pca(dados1,1,3)
trainIndex <- createDataPartition(dados1$class, p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados1[ trainIndex,]
base_teste<- dados1[-trainIndex,]
set.seed(7)
fitControl <- trainControl(
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 3)
model = train(base_treinamento[,-3100],
base_treinamento$class,
method = "lda",
tuneLength = 10,
trControl = fitControl);model
previsoes = predict(model , newdata = dados1[,-3100])
matriz_confusao = table(previsoes, dados1[,3100])
confusionMatrix(matriz_confusao)
previsoes = predict(model, newdata = base_teste[-3100])
matriz_confusao = table(previsoes,base_teste[, 3100])
print(matriz_confusao)
confusionMatrix(matriz_confusao)
model = train(base_treinamento[,-3100],
base_treinamento$class,
method = "kernelpls",
tuneLength = 10,
trControl = fitControl);model
previsoes = predict(model , newdata = dados1[,-3100])
matriz_confusao = table(previsoes, dados1[,3100])
confusionMatrix(matriz_confusao)
