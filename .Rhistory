x = "Lotes",
y = "mm2",
subtitle = "Área"
)+ geom_hline(yintercept = 0,color = "black", size=0.8) +geom_text(aes(label=tukey), size = 3, position=position_dodge()) +geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,
position=position_dodge(.9))
var1
var1 <- All %>%
filter(variable == "SeedArea") %>%
ggplot(aes(x = lote, y = value, fill = lote)) +
geom_bar(stat='identity', alpha = 0.7) +
scale_fill_manual(values = c("#d8b365","#5ab4ac", "#d8b365","#5ab4ac", "#d8b365")) +
ylim(0, 30)+
scale_x_discrete(limits=c("1","2","3","4","5"))+
labs(
x = "Lotes",
y = "mm2",
subtitle = "Área"
) +geom_text(aes(label=tukey), size = 3, position=position_dodge()) +geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,
position=position_dodge(.9))
var1
var1 <- All %>%
filter(variable == "SeedArea") %>%
ggplot(aes(x = lote, y = value, fill = lote, position_dodge())) +
geom_bar(stat='identity', alpha = 0.7) +
scale_fill_manual(values = c("#d8b365","#5ab4ac", "#d8b365","#5ab4ac", "#d8b365")) +
ylim(0, 30)+
scale_x_discrete(limits=c("1","2","3","4","5"))+
labs(
x = "Lotes",
y = "mm2",
subtitle = "Área"
) +geom_text(aes(label=tukey), size = 3, position=position_dodge()) +geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2, position=position_dodge(.9))
var1
var1 <- All %>%
filter(variable == "SeedArea") %>%
ggplot(aes(x = lote, y = value, fill = lote, position_dodge(width = 10))) +
geom_bar(stat='identity', alpha = 0.7) +
scale_fill_manual(values = c("#d8b365","#5ab4ac", "#d8b365","#5ab4ac", "#d8b365")) +
ylim(0, 30)+
scale_x_discrete(limits=c("1","2","3","4","5"))+
labs(
x = "Lotes",
y = "mm2",
subtitle = "Área"
) +geom_text(aes(label=tukey), size = 3, position=position_dodge()) +geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2, position=position_dodge(.9))
var1
var1 <- All %>%
filter(variable == "G") %>%
ggplot(aes(x = lote, y = value, fill = lote, position_dodge(width = 10))) +
geom_bar(stat='identity', alpha = 0.7) +
scale_fill_manual(values = c("#d8b365","#5ab4ac", "#d8b365","#5ab4ac", "#d8b365")) +
ylim(0, 30)+
scale_x_discrete(limits=c("1","2","3","4","5"))+
labs(
x = "Lotes",
y = "mm2",
subtitle = "Área"
) +geom_text(aes(label=tukey), size = 3, position=position_dodge()) +geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2, position=position_dodge(.9))
var1
install.packages("xlsx")
library(readxl)
library(plyr)
lista<-list.files("C:\\Users\\medei\\OneDrive\\Área de Trabalho\\Daniel_angico\\LOTES - ANDRÉ\\L1",full.names=TRUE)
lista<-list.files("C:\\Users\\medei\\OneDrive\\Área de Trabalho\\Daniel_angico\\LOTES - ANDRÉ\\L1",full.names=TRUE)
arquivos <- lapply(lista, function(x) read.table(x, header=T))
dados    <- do.call("rbind", arquivos)
dados
head(dados)
str(dados)
View(dados)
View(arquivos)
View(arquivos)
View(arquivos)
View(dados)
View(arquivos)
dados<-read.table("dados.txt",h=T)
View(dados)
str(dados)
library(ExpDes.pt)
View(dados)
View(dados)
dic(Tratamento, Altura, quali = T, mcomp = "tukey",  hvar='bartlett', sigT = 0.05, sigF = 0.05)
dic(dados$Tratamento, dados$Altura, quali = T, mcomp = "tukey",  hvar='bartlett', sigT = 0.05, sigF = 0.05)
dic(Tratamento, Altura, quali = T, mcomp = "tukey",  hvar='bartlett', sigT = 0.05, sigF = 0.05)
dic(dados$Tratamento, dados$Altura, quali = T, mcomp = "tukey",  hvar='bartlett', sigT = 0.05, sigF = 0.05)
dbc(dados$Tratamento,dados$Rep, dados$Altura, quali = T, mcomp = "tukey",  hvar='bartlett', sigT = 0.05, sigF = 0.05)
dbc(dados$Tratamento,dados$Rep, dados$Altura, quali = T, mcomp = "tukey",  sigT = 0.05, sigF = 0.05)
# Abrindo dados
```{r}
dados<-read.table("dados.txt",h=T)
str(dados)
#install.packages("ExpDes.pt")
library(ExpDes.pt)
fat2.dic(dados$Fung, dados$Dose, dados$Prod, quali = c(TRUE, F), mcomp = "tukey",
fac.names = c("F1", "F2"), sigT = 0.05, sigF = 0.05)
dados<-read.table("dados.txt",h=T)
#install.packages("ExpDes.pt")
library(ExpDes.pt)
fat2.dic(dados$Fung, dados$Dose, dados$Prod, quali = c(TRUE, F), mcomp = "tukey",
fac.names = c("F1", "F2"), sigT = 0.05, sigF = 0.05)
library(doParallel)
library(caret)
library(reshape2)
library(ggplot2)
library(prospectr)
# chamar aquivo
base <- read.table('dados_ML.txt', h=T, check.names = T)
base$class<-as.factor(base$class)
# Particionar dados
set.seed(7)
trainIndex <- createDataPartition(base$class, p = .6,
list = FALSE,
times = 1)
base_treinamento <- base[ trainIndex,]
base_teste<- base[-trainIndex,]
# Ajuste de parâmetros dos modelos
ctrl = trainControl(## 10-fold CV
method = "repeatedcv",
number = 5)
ga_ctrl<-gafsControl(functions = caretGA,
method    = "cv",
number    = 5,
verbose   = TRUE,
allowParallel = TRUE,
genParallel   = TRUE)
##Computação paralela
#registerDoSEQ()
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
classificador_pls <- gafs(base_treinamento[,-3112],
base_treinamento$class,
popSize = 20,
method  = "kernelpls",
tuneLength = 10,
gafsControl = ga_ctrl,
trControl = ctrl)
classificador_pls
#Teste
previsoes = predict(classificador_PLS, newdata = base_teste[-3112])
matriz_confusao = table(previsoes,base_teste[, 3112])
#Teste
previsoes = predict(classificador_pls, newdata = base_teste[-3112])
matriz_confusao = table(previsoes,base_teste[, 3112])
confusionMatrix(matriz_confusao)
View(classificador_pls)
classificador_pls[["optVariables"]]
classificador_pls
View(classificador_pls)
classificador_pls
classificador_pls[["ga_param"]]
plot(classificador_pls)
classificador_pls$ga$final
final <- classificador_pls$ga$final
base_treinamento_1<-base_treinamento[,final]
base_teste_1<-base_teste[, final]
View(base_treinamento_1)
base_treinamento_1<-cbind(base_treinamento[,final],base$class)
base$class
base_treinamento_1<-cbind(base_treinamento[,final],base$class)
base_treinamento_1<-cbind(base_treinamento[,final],base_treinamento$class)
base_teste_1<-cbind(base_teste[, final], base_teste$class)
classificador_PLS = train(base_treinamento1[,-1857],
base_treinamento$class,
method = 'kernelpls',
tuneLength = 10,
trControl=ctrl);classificador_PLS
classificador_PLS = train(base_treinamento_1[,-1857],
base_treinamento_1$class,
method = 'kernelpls',
tuneLength = 10,
trControl=ctrl);classificador_PLS
View(base_treinamento_1)
final <- classificador_pls$ga$final
class<-base_treinamento$class
base_treinamento_1<-cbind(base_treinamento[,final],base_treinamento$class)
class<-base_teste$class
base_teste_1<-cbind(base_teste[, final], base_teste$class)
classificador_PLS = train(base_treinamento_1[,-1857],
base_treinamento_1$class,
method = 'kernelpls',
tuneLength = 10,
trControl=ctrl);classificador_PLS
View(base_treinamento_1)
final <- classificador_pls$ga$final
class<-base_treinamento$class
base_treinamento_1<-cbind(base_treinamento[,final],class)
class<-base_teste$class
base_teste_1<-cbind(base_teste[, final], class)
View(base_treinamento)
str(base_teste_1$class)
classificador_PLS = train(base_treinamento_1[,-1857],
base_treinamento_1$class,
method = 'kernelpls',
tuneLength = 10,
trControl=ctrl);classificador_PLS
#Treinamento
previsoes = predict(classificador_PLS , newdata = base_treinamento[,-3112])
matriz_confusao = table(previsoes, base_treinamento[,3112])
confusionMatrix(matriz_confusao)
#Teste
previsoes = predict(classificador_pls, newdata = base_teste[-3112])
matriz_confusao = table(previsoes,base_teste[, 3112])
confusionMatrix(matriz_confusao)
plot(classificador_pls)
GA <- gafs(base_treinamento[,-3112],
base_treinamento$class,
popSize = 50,
iters = 100,
gafsControl = ga_ctrl)
# chamar aquivo
base1 <- read.table('dados_ML.txt', h=T, check.names = T)
# chamar aquivo
base1 <- read.table('dados_ML.txt', h=T, check.names = T)
# Primeira derivada
base_NIR<-as.data.frame(base1[,1:3111])
base_NIR<- savitzkyGolay(base_NIR,2,2,13)
base<-as.data.frame(base_NIR)
base$class<-as.factor(base1$class)
base$class<-as.factor(base1$class)
base[,1:3099]<-scale(base[,1:3099])
# Particionar dados
set.seed(7)
trainIndex <- createDataPartition(base$class, p = .6,
list = FALSE,
times = 1)
base_treinamento <- base[ trainIndex,]
base_teste<- base[-trainIndex,]
ga_ctrl<-gafsControl(functions = caretGA,
method    = "cv",
number    = 5,
verbose   = TRUE,
allowParallel = TRUE,
genParallel   = TRUE)
GA <- gafs(base_treinamento[,-3100],
base_treinamento$class,
popSize = 50,
iters = 100,
gafsControl = ga_ctrl)
library(devtools)
create("prrpac", rstudio = FALSE)
create("niradm", rstudio = FALSE)
install.packages("~/niradm_0.0.2.tar.gz", repos = NULL, type = "source")
library(niradm)
install.packages("~/niradm_0.0.2.tar.gz", repos = NULL, type = "source")
library(niradm)
remove.packages("niradm", lib="~/R/win-library/4.0")
install.packages("~/niradm_0.0.2.tar.gz", repos = NULL, type = "source")
remove.packages("niradm", lib="~/R/win-library/4.0")
install.packages("~/niradm_0.0.2.tar.gz", repos = NULL, type = "source")
install.packages("~/niradm_0.0.3.tar.gz", repos = NULL, type = "source")
library(niradm)
.rs.restartR()
.rs.restartR()
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.3.tar.gz", repos = NULL, type = "source")
library(niradm)
remove.packages("niradm", lib="~/R/win-library/4.0")
install.packages("~/niradm_0.0.3.tar.gz", repos = NULL, type = "source")
.rs.restartR()
install.packages("~/niradm_0.0.3.tar.gz", repos = NULL, type = "source")
data(nir_seed)
library(niradm)
data("nir_seed")
force(nir_seed)
vizplotmean(nir_seed)
.rs.restartR()
.rs.restartR()
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.3.tar.gz", repos = NULL, type = "source")
data("nir_seed")
library(niradm)
vizplotmean(nir_seed)
library(niradm)
data("nir_seed")
vizplotmean(nir_seed1)
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.3.tar.gz", repos = NULL, type = "source")
library(niradm)
vizplotmean(nir_seed1)
vizplotmean(nir_seed)
.rs.restartR()
remove.packages("niradm", lib="~/R/win-library/4.0")
install.packages("~/niradm_0.0.3.tar.gz", repos = NULL, type = "source")
.rs.restartR()
install.packages("~/niradm_0.0.3.tar.gz", repos = NULL, type = "source")
library(niradm)
vizplotmean(nir_seed)
vizplotmean(nir_seed1)
vizplotraw(nir_seed)
remove.packages("niradm", lib="~/R/win-library/4.0")
library(niradm)
.rs.restartR()
install.packages("~/niradm_0.0.5.tar.gz", repos = NULL, type = "source")
library(niradm)
vizplotmean(nir_seed)
der_SG(nir_seed,1,2,10)
der_SG(nir_seed,1,2,11)
dados<-as.data.frame(der_SG(nir_seed,1,2,11))
View(dados)
vizplotmean(nir_seed)
dados<-as.data.frame(der_SG(nir_seed,1,2,11))
View(dados)
vizplotmean(dados)
vizplotraw(dados)
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.5.tar.gz", repos = NULL, type = "source")
library(niradm)
vizplotmean(nir_seed)
der_SG(nir_seed,1,2,11)
dados<-der_SG(nir_seed,1,2,11)
View(dados)
vizplotmean(dados)
vizplotraw(dados)
dados<-der_SG(nir_seed,2,2,11)
vizplotmean(dados)
dados<-der_SG(nir_seed,3,2,11)
dados<-der_SG(nir_seed,3,3,11)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,3,11)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,2,11)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,3,11)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,3,13)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,3,7)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,3,30)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,3,23)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,3,11)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,3,7)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,3,0)
dados<-der_SG(nir_seed,2,3,1)
dados<-der_SG(nir_seed,2,3,3)
dados<-der_SG(nir_seed,2,3,5)
vizplotmean(dados)
dados<-der_SG(nir_seed,2,3,13)
vizplotmean(dados)
vizplotmean(nir_seed)
a<-nir_seed
a[,-313]<-scale(a[,-313], scale = F, center = T)
vizplotmean(a)
a[,-313]<-scale(nir_seed[,-313], scale = F, center = T)
a<-nir_seed
a[,-313]<-scale(nir_seed[,-313], scale = F, center = T)
vizplotmean(a)
a[,-313]<-scale(nir_seed[,-313], scale = T, center = T)
vizplotmean(a)
a[,-313]<-scale(nir_seed[,-313], scale = T, center = F)
vizplotmean(a)
a[,-313]<-scale(nir_seed[,-313], scale = T, center = T)
vizplotmean(a)
a[,-313]<-scale(nir_seed[,-313], scale = F, center = T)
vizplotmean(a)
a[,-313]<-scale(nir_seed[,-313], scale = T, center = T)
vizplotmean(a)
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
.rs.restartR()
install.packages("~/niradm_0.0.4.tar.gz", repos = NULL, type = "source")
library(niradm)
data(nir_seed)
a<-vizplotmean(nir_seed)
#Applying 1st derivative with Savitzky-Golay smoothing.
dados<-der_SG(nir_seed,1,2,11)
b<-vizplotmean(dados)
#Applying 2nd derivative with Savitzky-Golay smoothing.
dados<-der_SG(nir_seed,2,2,11)
c<-vizplotmean(dados)
ggarrange(a, b, c,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
library(ggpubr)
ggarrange(a, b, c,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.4.tar.gz", repos = NULL, type = "source")
library(niradm)
a<-vizplotmean(nir_seed)
#Applying 1st derivative with Savitzky-Golay smoothing.
dados<-der_SG(nir_seed,1,2,11)
b<-vizplotmean(dados)
#Applying 2nd derivative with Savitzky-Golay smoothing.
dados<-der_SG(nir_seed,2,2,11)
c<-vizplotmean(dados)
library(ggpubr)
ggarrange(a, b, c,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
data(nir_seed)
dados<-scale_center(nir_seed)
a<-vizplotmean(nir_seed)
b<-vizplotmean(dados)
library(ggpubr)
ggarrange(a, b,
labels = c("A", "B"),
ncol = 2, nrow = 1)
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.4.tar.gz", repos = NULL, type = "source")
library(niradm)
pca(nir_seed,axes=c(1,2))
pca(nir_seed,axes=c(1,3))
pca(nir_seed,axes=c(1,4))
pca(nir_seed)
pca(nir_seed)+axes=c(1,3)
pca(nir_seed) + axes=c(1,3)
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.4.tar.gz", repos = NULL, type = "source")
library(niradm)
pca(nir_seed) + axes=c(1,3)
pca(nir_seed, axes=c(1,3))
pca(nir_seed, axes=c(1,3))
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.4.tar.gz", repos = NULL, type = "source")
library(niradm)
pca(nir_seed, axes=c(1,3))
pca(nir_seed, 1,2)
pca(nir_seed, 1,3)
pca(nir_seed, 2,3)
pca(nir_seed, 2,1)
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.4.tar.gz", repos = NULL, type = "source")
library(niradm)
pca(nir_seed, 2,1)
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.4.tar.gz", repos = NULL, type = "source")
library(niradm)
pca(nir_seed, 2,1)
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
install.packages("~/niradm_0.0.4.tar.gz", repos = NULL, type = "source")
library(niradm)
pca(nir_seed, 2,1)
# Instale
if ( ! Require ( devtools )) install.packages ( " devtools " )
if(!require(devtools)) install.packages("devtools")
devtools::install_github("admedeiros/niradm-packager")
devtools::install_github("admedeiros/niradm-packager")
devtools::install_github("admedeiros/niradm-packager")
devtools::install_github("admedeiros/niradm-packager/niradm")
devtools::install_github("admedeiros/niradm-package")
library(niradm)
pca(nir_seed,1,2)
#' @examples
#' data(nir_seed)
#' dados<-scale_center(nir_seed)
#' a<-vizplotmean(nir_seed)
#' b<-vizplotmean(dados)
#' library(ggpubr)
#' ggarrange(a, b,
#' labels = c("A", "B"),
#' ncol = 2, nrow = 1)
#' @export
library(factoextra)
devtools::install_github("admedeiros/niradm-package")
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
devtools::install_github("admedeiros/niradm-package")
library(niradm)
pca(nir_seed,1,2)
library(niradm)
library(niradm)
setwd("~/GitHub/niradm")
devtools::build_readme()
use_readme_rmd ( open  =  rlang :: is_interactive ())
devtools::build_readme()
use_readme_rmd ( open  =  rlang :: is_interactive ())
usethis::use_readme_md()
usethis::use_readme_rmd()
devtools::build_readme()
devtools::build_readme()
use_github_action("render-readme.yaml")
usethis::use_github_actions()
use_github_action("render-readme.yaml")
usethis::use_github_action("render-readme.yaml")
install.packages(rlang)
install.packages('rlang')
install.packages("rlang")
remove.packages("niradm", lib="~/R/win-library/4.0")
.rs.restartR()
library(usethis)
knit(input="readme.rmd", output = "readme.md")
knit(input="readme.rmd", output = "readme.md")
#Install
#if(!require(devtools)) install.packages("devtools")
devtools::install_github("admedeiros/niradm-package")
#Install
if(!require(devtools)) install.packages("devtools")
devtools::install_github("admedeiros/niradm-package")
install.packages("glue").
install.packages("glue")
devtools::install_github("admedeiros/niradm-package")
install.packages(rcpp)
install.packages("Rcpp")
version()
version
