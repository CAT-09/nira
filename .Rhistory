#default do escalonamento Z-score
class<-nir_seed[,313]
dados<-scale(nir_seed[,-313],scale=TRUE, center = TRUE)
dados<-as.data.frame(cbind(dados,class))
View(dados)
vizplotmean(dados)
vizplotmean(dados)
View(dados)
vizplotmean(nir_seed)
#default do escalonamento Z-score
class<-nir_seed[,313]
dados<-scale(nir_seed[,-313],scale=TRUE, center = TRUE)
dados<-as.data.frame(cbind(dados,class))
vizplotmean(dados)
#default do escalonamento Z-score
class<-nir_seed[,313]
dados<-scale(nir_seed[,-313],scale=TRUE, center = TRUE)
dados<-as.data.frame(cbind(dados,class))
vizplotmean(dados)
View(dados)
dados<-nir_seed
vizplotmean(dados)
View(dados)
library(niradm)
dados<-scale_center(nir_seed)
vizplotmean(dados)
View(dados)
#default do escalonamento Z-score
class<-nir_seed[,313]
dados<-scale(nir_seed[,-313],scale=TRUE, center = TRUE)
dados<-as.data.frame(cbind(dados,class))
str(dados)
dados[,-313]<-as.numeric(dados[,-313])
dados[,-313]<-as.numeric(dados[,-313])
dados[,-313]<-as.double(dados[,-313])
#default do escalonamento Z-score
class<-nir_seed[,313]
dados<-scale(nir_seed[,-313],scale=TRUE, center = TRUE)
str(dados)
dados<-data.frame(dados)
str(dados)
#default do escalonamento Z-score
class<-nir_seed[,313]
dados<-scale(nir_seed[,-313],scale=TRUE, center = TRUE)
dados<-cbind(dados,class)
dados<-as.data.frame(dados)
vizplotmean(dados)
#default do escalonamento Z-score
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center = TRUE)
vizplotmean(dados)
#default do escalonamento Z-score
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center = TRUE)
vizplotmean(dados)
#Centralização
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALE, center = TRUE)
b<-vizplotmean(dados)
#autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center =FALSE)
c<-vizplotmean(dados)
#Centralizar primeiro e depois autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
#default do escalonamento Z-score
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center = TRUE)
vizplotmean(dados)
#Centralização
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
b<-vizplotmean(dados)
#autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center =FALSE)
c<-vizplotmean(dados)
#Centralizar primeiro e depois autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
dados[,-313]<-scale(dados[,-313], scale=TRUE,center=FALSE)
d<-vizplotmean(dados)
(a|b|c|d)
#default do escalonamento Z-score
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center = TRUE)
a<-vizplotmean(dados)
#Centralização
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
b<-vizplotmean(dados)
#autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center =FALSE)
c<-vizplotmean(dados)
#Centralizar primeiro e depois autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
dados[,-313]<-scale(dados[,-313], scale=TRUE,center=FALSE)
d<-vizplotmean(dados)
(a|b|c|d)
library(niradm)
library(patchwork)
#default do escalonamento Z-score
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center = TRUE)
a<-vizplotmean(dados)
#Centralização
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
b<-vizplotmean(dados)+labs(subtitle = "Centralização"
)
#autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center =FALSE)
c<-vizplotmean(dados)
#Centralizar primeiro e depois autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
dados[,-313]<-scale(dados[,-313], scale=TRUE,center=FALSE)
d<-vizplotmean(dados)
(a|b|c|d)
vizplotmean(dados)+labs(subtitle = "Centralização")
library(ggplot2)
vizplotmean(dados)+labs(subtitle = "Centralização")
library(niradm)
library(patchwork)
library(ggplot2)
# R scale
#default do escalonamento Z-score
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center = TRUE)
a<-vizplotmean(dados)+labs(subtitle = "z-score")
#Centralização
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
vizplotmean(dados)+labs(subtitle = "Centralização")
#autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center =FALSE)
c<-vizplotmean(dados)+labs(subtitle = "autoescalar")
#Centralizar primeiro e depois autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
dados[,-313]<-scale(dados[,-313], scale=TRUE,center=FALSE)
d<-vizplotmean(dados)+labs(subtitle = "Centralização e autoescalar")
(a|b|c|d)
library(niradm)
library(patchwork)
library(ggplot2)
# R scale
#default do escalonamento Z-score
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center = TRUE)
a<-vizplotmean(dados)+labs(subtitle = "z-score")
#Centralização
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
b<-vizplotmean(dados)+labs(subtitle = "Centralização")
#autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center =FALSE)
c<-vizplotmean(dados)+labs(subtitle = "autoescalar")
#Centralizar primeiro e depois autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
dados[,-313]<-scale(dados[,-313], scale=TRUE,center=FALSE)
d<-vizplotmean(dados)+labs(subtitle = "Centralização e autoescalar")
(a|b|c|d)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
library(niradm)
library(patchwork)
library(ggplot2)
# R scale
#default do escalonamento Z-score
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center = TRUE)
a<-vizplotmean(dados)+labs(subtitle = "z-score")
#Centralização
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
b<-vizplotmean(dados)+labs(subtitle = "Centralização")
#autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center =FALSE)
c<-vizplotmean(dados)+labs(subtitle = "autoescalar")
#Centralizar primeiro e depois autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
dados[,-313]<-scale(dados[,-313], scale=TRUE,center=FALSE)
d<-vizplotmean(dados)+labs(subtitle = "Centralização e autoescalar")
(a|b)/
(c|d)
autoscaling <- function (df) {
if (! is.data.frame (df)) {stop ("deve ser um data.frame")}
for (i in 1:NCOL(df)){
if (is.numeric(df[,i])==TRUE){
df[,i]<- df[,i]/sqrt(sum(df[,i]^2)/(length(df[,i])-1))
}else{
df[,i]=df[,i]}}
return (df) }
center <- function (df) {
if (! is.data.frame (df)) {stop ("deve ser um data.frame")}
for (i in 1:NCOL(df)){
if (is.numeric(df[,i])==TRUE){
df[,i] = df[,i]-mean(df[,i])
}else{
df[,i]=df[,i]}}
return (df) }
Center_scale_df <- function (df) {
if (! is.data.frame (df)) {stop ("deve ser um data.frame")}
for (i in 1:NCOL(df)){
if (is.numeric(df[,i])==TRUE){
df[,i] = (df[,i]-mean(df[,i]))/sd(df[,i])
}else{
df[,i]=df[,i]}}
return (df) }
##
dados<-nir_seed
dados<-autoscaling(dados)
a<-vizplotmean(dados)+labs(subtitle = "autoscaling")
a
dados<-nir_seed
dados<-autoscaling(dados)
e<-vizplotmean(dados)+labs(subtitle = "autoscaling")
dados<-nir_seed
dados<-center(dados)
f<-vizplotmean(dados)+labs(subtitle = "autoscaling")
dados<-nir_seed
dados<-Center_scale_df(dados)
g<-vizplotmean(dados)+labs(subtitle = "autoscaling")
library(niradm)
library(patchwork)
library(ggplot2)
# R scale
#default do escalonamento Z-score
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center = TRUE)
a<-vizplotmean(dados)+labs(subtitle = "z-score")
#Centralização
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
b<-vizplotmean(dados)+labs(subtitle = "Centralização")
#autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center =FALSE)
c<-vizplotmean(dados)+labs(subtitle = "autoescalar")
#Centralizar primeiro e depois autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
dados[,-313]<-scale(dados[,-313], scale=TRUE,center=FALSE)
d<-vizplotmean(dados)+labs(subtitle = "Centralização e autoescalar")
(a|b)/
(c|d)
#Funções criadas
autoscaling <- function (df) {
if (! is.data.frame (df)) {stop ("deve ser um data.frame")}
for (i in 1:NCOL(df)){
if (is.numeric(df[,i])==TRUE){
df[,i]<- df[,i]/sqrt(sum(df[,i]^2)/(length(df[,i])-1))
}else{
df[,i]=df[,i]}}
return (df) }
center <- function (df) {
if (! is.data.frame (df)) {stop ("deve ser um data.frame")}
for (i in 1:NCOL(df)){
if (is.numeric(df[,i])==TRUE){
df[,i] = df[,i]-mean(df[,i])
}else{
df[,i]=df[,i]}}
return (df) }
Center_scale_df <- function (df) {
if (! is.data.frame (df)) {stop ("deve ser um data.frame")}
for (i in 1:NCOL(df)){
if (is.numeric(df[,i])==TRUE){
df[,i] = (df[,i]-mean(df[,i]))/sd(df[,i])
}else{
df[,i]=df[,i]}}
return (df) }
##
dados<-nir_seed
dados<-autoscaling(dados)
e<-vizplotmean(dados)+labs(subtitle = "autoscaling")
dados<-nir_seed
dados<-center(dados)
f<-vizplotmean(dados)+labs(subtitle = "center")
dados<-nir_seed
dados<-Center_scale_df(dados)
g<-vizplotmean(dados)+labs(subtitle = "center_scale_df")
(a|b)/
(c|d)/
(e|f)/
(g)
library(niradm)
library(patchwork)
library(ggplot2)
# R scale
#default do escalonamento Z-score
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center = TRUE)
a<-vizplotmean(dados)+labs(subtitle = "z-score")
#Centralização
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
b<-vizplotmean(dados)+labs(subtitle = "Centralização")
#autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=TRUE, center =FALSE)
c<-vizplotmean(dados)+labs(subtitle = "autoescalar")
#Centralizar primeiro e depois autoescalar
dados<-nir_seed
dados[,-313]<-scale(dados[,-313],scale=FALSE, center = TRUE)
dados[,-313]<-scale(dados[,-313], scale=TRUE,center=FALSE)
d<-vizplotmean(dados)+labs(subtitle = "Centralização e autoescalar")
(a|b)/
(c|d)
#Funções criadas
autoscaling <- function (df) {
if (! is.data.frame (df)) {stop ("deve ser um data.frame")}
for (i in 1:NCOL(df)){
if (is.numeric(df[,i])==TRUE){
df[,i]<- df[,i]/sqrt(sum(df[,i]^2)/(length(df[,i])-1))
}else{
df[,i]=df[,i]}}
return (df) }
center <- function (df) {
if (! is.data.frame (df)) {stop ("deve ser um data.frame")}
for (i in 1:NCOL(df)){
if (is.numeric(df[,i])==TRUE){
df[,i] = df[,i]-mean(df[,i])
}else{
df[,i]=df[,i]}}
return (df) }
Center_scale_df <- function (df) {
if (! is.data.frame (df)) {stop ("deve ser um data.frame")}
for (i in 1:NCOL(df)){
if (is.numeric(df[,i])==TRUE){
df[,i] = (df[,i]-mean(df[,i]))/sd(df[,i])
}else{
df[,i]=df[,i]}}
return (df) }
##
dados<-nir_seed
dados<-autoscaling(dados)
e<-vizplotmean(dados)+labs(subtitle = "autoscaling")
dados<-nir_seed
dados<-center(dados)
f<-vizplotmean(dados)+labs(subtitle = "center")
dados<-nir_seed
dados<-Center_scale_df(dados)
g<-vizplotmean(dados)+labs(subtitle = "center_scale_df")
(a|g)/
(b|f)/
(c|e)
library(niradm)
dados<-nir_seed
vizplotraw(dados)
dados<-msc_pt(dados)
vizplotraw(dados)
msc <- function(input_data, reference = NA){
# Scatter Correction technique performed with mean of the sample data as the reference.
# input_data: DataFrame of spectral data
# return: Scatter corrected spectra data
ref <- data.frame(matrix(0, nrow = 1, ncol = ncol(input_data)))
# mean centre correction
for (i in nrow(input_data)) {
input_data[i,] = input_data[i,] -rowMeans(input_data[i,])
}
# Define a new data.frame and populate it with zero
data_msc <-  data.frame(matrix(0, ncol = ncol(input_data), nrow = nrow(input_data)))
# Get the reference spectrum. If not given, estimate it from the mean
if (is.na(reference))
{
for (j in 1:ncol(input_data))
{
ref[,j] = mean((input_data[,j]))
}
}
else
{
ref = reference
}
# Run regression
for (i in 1:nrow(input_data)){
fit = lm(t(ref)~t(input_data[i,]))
# Apply correction
data_msc[i,] = (input_data[i,] - fit$coefficients[1])/fit$coefficients[2]
}
return (data_msc)
}
msc(dados[,-313])
dados<-msc(dados[,-313])
vizplotraw(dados)
dados<-nir_seed
dados[,-313]<-msc(dados[,-313])
vizplotraw(dados)
dados<-read.table("spectra.txt", h=T, check.names = F)
dados<-msc_pt(dados)
library(niradm)
library(caret)
library(plotly)
dados<-read.table("spectra.txt", h=T, check.names = F)
dados<-msc_pt(dados)
set.seed(311)
trainIndex <- createDataPartition(dados$class, p = .6,
list = FALSE,
times = 1)
base_treinamento <- dados[trainIndex,]
base_teste<- dados[-trainIndex,]; vizplotmean(dados)
vizplotraw(base_treinamento)
ggsave("img.jpg",width = 10,height = 8, dpi=300)
#write.table(base_treinamento,"training_msc.txt")
#write.table(base_teste,"test_msc.txt")
library(devtools)
library(roxygen2)
load_all()
document()
library(devtools)
library(roxygen2)
load_all()
setwd("~/GitHub/niradm")
load_all()
document()
check_man()
document()
load_all()
document()
load_all()
document()
check_man()
document()
check()
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
load_all()
document()
check_man()
document()
check()
library(roxygen2)
load_all()
document()
load_all()
document()
check_man()
document()
check()
load_all()
document()
check_man()
document()
check()
load_all()
document()
check_man()
document()
check()
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
remove.packages("niradm", lib="~/R/win-library/4.0")
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
.rs.restartR()
.rs.restartR()
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
.rs.restartR()
library(devtools)
library(roxygen2)
load_all()
document()
check_man()
document()
check()
remove.packages("niradm", lib="~/R/win-library/4.0")
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
.rs.restartR()
.rs.restartR()
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
#Install
if(!require(devtools)) install.packages("devtools")
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
install.packages("glue")
#Install
if(!require(devtools)) install.packages("devtools")
if(!require(niradm)) devtools::install_github("admedeiros/niradm-package")
